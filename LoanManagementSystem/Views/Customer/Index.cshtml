@model IEnumerable<LoanManagementSystem.Models.LoanApplication>
@using System.ComponentModel.DataAnnotations
@using System.Reflection

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions {
    public string GetEnumDisplayName(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = field.GetCustomAttribute<DisplayAttribute>();
        return attribute != null ? attribute.GetName() : value.ToString();
    }
}




    <div style="display:@(Model.Count() == 0 ? "" : "none")">
        <h1 class="my-2">You have no Loan Applications</h1>
        @Html.ActionLink("Apply Now!", "schemes")
    </div>
    <div style="display:@(Model.Count() == 0 ? "none" : "")">
        <h1 class="my-2">My Loans</h1>


        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Scheme.SchemeName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EMIAmount)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.ApplicationDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PaymentStartDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NextPaymentDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PaymentsMissed)
                </th>
                <th>@Html.DisplayNameFor(m => m.Status)</th>
                <th>Options</th>
            </tr>

            @foreach (var item in Model)
            {

                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Scheme.SchemeName)
                    </td>
                    <td>
                        @(item.EMIAmount.ToString("C", new System.Globalization.CultureInfo("en-IN")))
                    </td>
                    <td>
                        @item.ApplicationDate.ToString("dd-MM-yyy")
                    </td>
                    @if (item.Status == LoanManagementSystem.Models.ApplicationStatus.LoanRepayment)
                    {
                        <td>
                            @item.PaymentStartDate.ToString("dd-MM-yyy")
                        </td>
                        <td>
                            @item.NextPaymentDate.ToString("dd-MM-yyy")
                        </td>
                    }
                    else if (item.Status == LoanManagementSystem.Models.ApplicationStatus.NPA)
                    {
                        <td>@item.PaymentStartDate.ToString("dd-MM-yyy")</td>
                        <td>N/A</td>
                    }
                    else
                    {
                        <td>N/A</td>
                        <td>N/A</td>
                    }

                    <td>
                        @Html.DisplayFor(modelItem => item.PaymentsMissed)
                    </td>
                    <td class="
                    @(item.Status == LoanManagementSystem.Models.ApplicationStatus.LoanRepayment ? "status-active" : item.Status == LoanManagementSystem.Models.ApplicationStatus.CollateralPending ? "status-collateral" : item.Status == LoanManagementSystem.Models.ApplicationStatus.LoanRepayment ? "status-repayment" : item.Status == LoanManagementSystem.Models.ApplicationStatus.PendingApproval ? "status-pending" : item.Status == LoanManagementSystem.Models.ApplicationStatus.Rejected ? "status-reject":"")">
                        <button disabled >@GetEnumDisplayName(item.Status)</button>
                        
                    </td>
                    @if (item.Status == LoanManagementSystem.Models.ApplicationStatus.LoanRepayment)
                    {
                        bool isWithinPaymentDateRange = DateTime.Now >= item.NextPaymentDate && DateTime.Now <= item.NextPaymentDate.AddDays(5);
                        bool paymentAlreadyDone = item.Repayments.Any() && item.Repayments.Last(r => r.IsApproved).PaymentDate >= item.NextPaymentDate.AddMonths(-1) &&
                            item.Repayments.Last(r => r.IsApproved).PaymentDate >= item.NextPaymentDate.AddMonths(-1).AddDays(5);


                        if (isWithinPaymentDateRange && !paymentAlreadyDone)
                        {
                            <td>

                                @Html.ActionLink("Pay Now!", "Index", "Payment", new { applicationId = item.ApplicationId }, new { @class = "btn btn-primary" })
                            </td>
                        }
                        else
                        {
                            <td>

                                <button class="btn btn-primary" disabled>Pay Now!</button>
                            </td>
                        }
                    }

                    else if (item.Status == LoanManagementSystem.Models.ApplicationStatus.AddCollateral)
                    {
                        <td>
                            @Html.ActionLink("Add Collateral Documents", "AddCollateral", "Customer", new { applicationId = item.ApplicationId }, new { @class = "btn btn-primary" })
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                </tr>
            }

        </table>
        <p>
            <span class="text-primary"> Want Another Loan? Get instant Approval!</span>
            @Html.ActionLink("Apply Now!", "schemes")
        </p>
    </div>






<style>
    .disabled-button {
        pointer-events: none;
        opacity: 0.6;
        cursor: not-allowed;
    }

        .disabled-button:hover {
            cursor: not-allowed
        }

    .btn {
        transition: opacity 0.3s; /* Smooth transition */
    }

        .btn:hover {
            cursor: pointer; /* Default cursor for enabled buttons */
        }

    .table td, .table th {
        text-align: center; /* Horizontally center text */
        vertical-align: middle; /* Vertically center text */
        white-space: nowrap;
        padding: 10px 15px;
        width: 200px;
        height: 50px;
    }



    table .status-active {
        
        padding: 10px;
    }
    table .status-repayment button {
        border: none;
        padding: 10px;
        color: white;
        background-color: green;
        border-radius: 20px;
        border-right-color: none;
    }

    table .status-collateral {
        
        padding: 10px;
    }
        table .status-collateral button {
            border: none;
            padding: 10px;
            color: black;
            background-color: #ffc107;
            border-radius: 20px;
            border-right-color: none;
        }

    table .status-repayment {
        
        padding: 10px;
    }
        table .status-repayment button {
            border: none;
            padding: 10px;
            color: white;
            background-color: green;
            border-radius: 20px;
            border-right-color: none;
        }

    table .status-pending {
        

        padding: 10px; /* Remove padding to fit the button height */
    }
        table .status-pending button {
            border: none;
            padding: 10px;
            color: black;
            background-color: #ffc107;
            border-radius: 20px;
            border-right-color: none;
        }

    table .status-reject {
        padding: 10px; /* Remove padding to fit the button height */
    }
    table .status-reject button {
        border: none;
        padding: 10px;
        color: white;
        background-color: #A6133C;
        border-radius: 20px;
        border-right-color: none;
    }
</style>

<script>
    const button = document.getElementById('applyButton');

    button.addEventListener('mouseover', function () {
        button.classList.add('disabled-button');
    });

    button.addEventListener('mouseleave', function () {
        button.classList.remove('disabled-button');
    });

    button.addEventListener('click', function (event) {
        if (button.classList.contains('disabled-button')) {
            event.preventDefault(); // Prevent click action if the button is disabled
        }
    });
</script>
