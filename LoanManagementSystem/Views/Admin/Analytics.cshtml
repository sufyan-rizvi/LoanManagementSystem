@using Newtonsoft.Json
@{
    ViewBag.Title = "Analytics";
    Layout = null;
}


<h2>Loan Management Analytics</h2>

<div style="width:75%;" class="my-5">
    <canvas id="barChart"></canvas>
    <p>
        <strong>Analysis:</strong> The bar chart shows the number of loan applications over the months. This can help assess seasonal trends in loan demand and guide staffing or promotional efforts accordingly.
    </p>
</div>

<div class="row">
    

    <div class="col">
        <div class="form-group my-5" style="width:50%; align-content:center">
            <canvas id="doughnutChart"></canvas>
            <p>
                <strong>Analysis:</strong> The doughnut chart illustrates the distribution of users by role. Most users are customers, followed by loan officers, with a smaller portion being admins. This insight can help in organizing resources and providing better support for each user group.
            </p>
        </div>
    </div>
</div>

<!-- Line Chart Section -->
<div style="width:70%; margin-top: 30px;" class="my-5">
    <canvas id="lineChart"></canvas>
    <p>
        <strong>Analysis:</strong> The line chart illustrates the total loan amounts approved over the same period. The chart shows an upward trend from March to May, indicating a possible increase in loan size, which could suggest larger or more frequent loans being taken by customers.
    </p>
</div>

<!-- Horizontal Bar Chart for NPA Percentage -->
<div style="width:75%; margin-top: 30px;" class="my-5">
    <canvas id="npaChart"></canvas>
    <p>
        <strong>Analysis:</strong> The horizontal bar chart shows the NPA percentages across months. May has the highest percentage, indicating an increase in non-performing assets. This could point to a need for more stringent loan recovery methods.
    </p>
</div>

<div>
    @Html.ActionLink("Generate Report", "GeneratePDf", "admin", null, new {@class= "btn btn-success"})
</div>

<!-- Add more canvas elements for additional charts -->

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>




    var officerCount = @Html.Raw(JsonConvert.SerializeObject(ViewBag.OfficerCount));
    var customerCount = @Html.Raw(JsonConvert.SerializeObject(ViewBag.CustomerCount));
    var adminCount = @Html.Raw(JsonConvert.SerializeObject(ViewBag.AdminCount));

    console.log(officerCount)
    console.log(customerCount)
    console.log(adminCount)
    // Doughnut Chart
    var doughnutChart = document.getElementById('doughnutChart').getContext('2d');
    var doughnutChartInstance = new Chart(doughnutChart, {
        type: 'doughnut',
        data: {
            labels: ['Loan Officers', 'Customers', 'Admins'],
            datasets: [{
                label: 'User Roles',
                data: [adminCount, customerCount, officerCount],
                backgroundColor: [
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(75, 192, 192, 0.2)'
                ],
                borderColor: [
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        }
    });





    //Bar Chart

    var loanApplications = @Html.Raw(JsonConvert.SerializeObject(ViewBag.LoanApplications));
    console.log(loanApplications)
    var barChart = document.getElementById('barChart').getContext('2d');
    var barChartInstance = new Chart(barChart, {
        type: 'bar',
        data: {
            labels: ["January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"],
            datasets: [{
                label: 'Loan Applications',
                data: loanApplications,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });


    // Line Chart Data
    var loanAmounts = @Html.Raw(JsonConvert.SerializeObject(ViewBag.LoanAmounts));
    var months = @Html.Raw(JsonConvert.SerializeObject(ViewBag.Months));
    // Line Chart for Loan Amounts
    var lineChart = document.getElementById('lineChart').getContext('2d');
    var lineChartInstance = new Chart(lineChart, {
        type: 'line',
        data: {
            labels: months,
            datasets: [{
                label: 'Loan Amounts (in USD)',
                data: loanAmounts,
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 2,
                fill: false
            }]
        },
        options: {
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Months'
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Loan Amount (in USD)'
                    }
                }
            }
        }
    });



    var npaPercentages = @Html.Raw(JsonConvert.SerializeObject(ViewBag.NPAPercentages));
    console.log(npaPercentages)
    // Horizontal Bar Chart for NPA Percentage
    var npaChart = document.getElementById('npaChart').getContext('2d');
    var npaChartInstance = new Chart(npaChart, {
        type: 'bar',
        data: {
            labels: months,
            datasets: [{
                label: 'NPA Percentage (%)',
                data: npaPercentages,
                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                borderColor: 'rgba(255, 159, 64, 1)',
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y',  // This makes it horizontal
            scales: {
                x: {
                    beginAtZero: true
                }
            }
        }
    });


</script>



